{"uuid": "14f17be6-1c47-41d3-acaf-f117a8c9a9c4", "fullName": "Test.Test_ ManagementCenter.test_role_preserve.TestRoleProserve#test_edit_role", "stop": 1610544819345, "start": 1610544819330, "name": "test_edit_role", "testCaseId": "06627d01289e3dcd5c10f8e55c2ca7f2", "status": "broken", "labels": [{"name": "subSuite", "value": "TestRoleProserve"}, {"name": "parentSuite", "value": "Test.Test_ ManagementCenter"}, {"name": "suite", "value": "test_role_preserve"}, {"name": "host", "value": "PC-20200805IJRU"}, {"name": "thread", "value": "3508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.Test_ ManagementCenter.test_role_preserve"}], "statusDetails": {"trace": "self = <test_role_preserve.TestRoleProserve object at 0x0000020C3EB8BCF8>\n\n    def test_edit_role(self):\n        self.mcpage.click_MC()\n        # self.mcpage.click_menu(\"角色维护\")\n>       self.mcpage.edit_role(\"角色名称001\", \"新角色名称\", \"新角色描述\")\n\nself       = <test_role_preserve.TestRoleProserve object at 0x0000020C3EB8BCF8>\n\nTest\\Test_ ManagementCenter\\test_role_preserve.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\management_center_page.py:85: in edit_role\n    self.click_ele([By.XPATH,\".//td[contains(text(),'{}')]//..//input[@ type = 'radio']\".format(roleName)])\n        newRoleDescrip = '新角色描述'\n        newRoleName = '新角色名称'\n        roleName   = '角色名称001'\n        self       = <page.management_center_page.MCPage object at 0x0000020C3EAFAF28>\nbase\\base_page.py:34: in click_ele\n    self.find_ele(loc).click()\n        loc        = ['xpath', \".//td[contains(text(),'角色名称001')]//..//input[@ type = 'radio']\"]\n        self       = <page.management_center_page.MCPage object at 0x0000020C3EAFAF28>\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n        self       = <selenium.webdriver.firefox.webelement.FirefoxWebElement (session=\"3c61f966-7cf5-4ea0-be8b-421034d24c3b\", element=\"3549aaba-b66b-4396-b186-6d232a716b41\")>\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n        command    = 'clickElement'\n        params     = {'id': '3549aaba-b66b-4396-b186-6d232a716b41', 'sessionId': '3c61f966-7cf5-4ea0-be8b-421034d24c3b'}\n        self       = <selenium.webdriver.firefox.webelement.FirefoxWebElement (session=\"3c61f966-7cf5-4ea0-be8b-421034d24c3b\", element=\"3549aaba-b66b-4396-b186-6d232a716b41\")>\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'clickElement'\n        params     = {'id': '3549aaba-b66b-4396-b186-6d232a716b41'}\n        response   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <input class=\\\\\"ant-radio-i...e@chrome://marionette/content/listener.js:447:11\\\\nclickElement@chrome://marionette/content/listener.js:1331:24\\\\n\"}}'}\n        self       = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"3c61f966-7cf5-4ea0-be8b-421034d24c3b\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020C3EB8FB38>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <input class=\\\\\"ant-radio-i...e@chrome://marionette/content/listener.js:447:11\\\\nclickElement@chrome://marionette/content/listener.js:1331:24\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <input class=\"ant-radio-input\" type=\"radio\"> is not clickable at point (264,376) because another element <div class=\"ant-modal-wrap ant-modal-cust-warp\"> obscures it\n\nexception_class = <class 'selenium.common.exceptions.ElementClickInterceptedException'>\njson       = <module 'json' from 'd:\\\\work\\\\tools3\\\\python\\\\python35\\\\lib\\\\json\\\\__init__.py'>\nmessage    = 'Element <input class=\"ant-radio-input\" type=\"radio\"> is not clickable at point (264,376) because another element <div class=\"ant-modal-wrap ant-modal-cust-warp\"> obscures it'\nresponse   = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <input class=\\\\\"ant-radio-i...e@chrome://marionette/content/listener.js:447:11\\\\nclickElement@chrome://marionette/content/listener.js:1331:24\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020C3EB8FB38>\nstacktrace = None\nstatus     = 'element click intercepted'\nvalue      = {'error': 'element click intercepted', 'message': 'Element <input class=\"ant-radio-input\" type=\"radio\"> is not clickab...vigate@chrome://marionette/content/listener.js:447:11\\nclickElement@chrome://marionette/content/listener.js:1331:24\\n'}\nvalue_json = '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <input class=\\\\\"ant-radio-input\\\\\" type=\\\\\"radio\\\\\">...te@chrome://marionette/content/listener.js:447:11\\\\nclickElement@chrome://marionette/content/listener.js:1331:24\\\\n\"}}'\n\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException", "message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <input class=\"ant-radio-input\" type=\"radio\"> is not clickable at point (264,376) because another element <div class=\"ant-modal-wrap ant-modal-cust-warp\"> obscures it"}, "historyId": "6ebdb81391f09f2c6b57d1b325851d1e"}