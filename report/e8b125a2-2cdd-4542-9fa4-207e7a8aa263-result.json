{"name": "test_unable_add_same_first_department[部门管理-系统管理-添加一级部门测试004]", "parameters": [{"value": "'部门管理'", "name": "chirld_menuName"}, {"value": "'系统管理'", "name": "first_menuName"}, {"value": "'添加一级部门测试004'", "name": "same_department_name"}], "uuid": "33df64e3-2a16-4740-b52c-9af2a0cc0aff", "statusDetails": {"trace": "self = <test_department_manage.TestDepartmentManage object at 0x00000118D5C935F8>, chirld_menuName = '部门管理', first_menuName = '系统管理', same_department_name = '添加一级部门测试004'\n\n    @pytest.mark.parametrize(\"chirld_menuName,first_menuName,same_department_name\", get_data())\n    def test_unable_add_same_first_department(self,chirld_menuName,first_menuName,same_department_name):\n        self.mcpage.click_MC()\n        self.mcpage.click_menu(chirld_menuName,first_menuName)\n>       self.mcpage.unable_add_same_first_department(same_department_name)\n\nchirld_menuName = '部门管理'\nfirst_menuName = '系统管理'\nsame_department_name = '添加一级部门测试004'\nself       = <test_department_manage.TestDepartmentManage object at 0x00000118D5C935F8>\n\ntest\\test_ management_center\\test_department_manage.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\management_center_page.py:138: in unable_add_same_first_department\n    self.find_ele(page.add_same_department_msg)\n        same_department_name = '添加一级部门测试004'\n        self       = <page.management_center_page.MCPage object at 0x00000118D5C93668>\nbase\\base_page.py:22: in find_ele\n    return self.driver.find_element(loc[0], loc[1])\n        loc        = ('xpath', \".//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]\")\n        self       = <page.management_center_page.MCPage object at 0x00000118D5C93668>\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: in find_element\n    'value': value})['value']\n        by         = 'xpath'\n        self       = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e538930f-7e99-44c4-84cb-ed7a9e65668d\")>\n        value      = \".//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]\"\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'findElement'\n        params     = {'using': 'xpath', 'value': \".//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]\"}\n        response   = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .//i/../span[contai...ror@chrome://marionette/content/error.js:387:5\\\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\\\n\"}}'}\n        self       = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e538930f-7e99-44c4-84cb-ed7a9e65668d\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000118D5CC4048>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .//i/../span[contai...ror@chrome://marionette/content/error.js:387:5\\\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]\n\nexception_class = <class 'selenium.common.exceptions.NoSuchElementException'>\njson       = <module 'json' from 'd:\\\\work\\\\tools3\\\\python\\\\python35\\\\lib\\\\json\\\\__init__.py'>\nmessage    = \"Unable to locate element: .//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]\"\nresponse   = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .//i/../span[contai...ror@chrome://marionette/content/error.js:387:5\\\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\\\n\"}}'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000118D5CC4048>\nstacktrace = None\nstatus     = 'no such element'\nvalue      = {'error': 'no such element', 'message': \"Unable to locate element: .//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名...entError@chrome://marionette/content/error.js:387:5\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\n'}\nvalue_json = '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: .//i/../span[contains(text(),\\'同父部门下重复的部门名称或...rror@chrome://marionette/content/error.js:387:5\\\\nelement.find/</<@chrome://marionette/content/element.js:330:16\\\\n\"}}'\n\nd:\\work\\tools3\\python\\python35\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException", "message": "selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .//i/../span[contains(text(),'同父部门下重复的部门名称或重复的一级部门名')]"}, "fullName": "test.test_ management_center.test_department_manage.TestDepartmentManage#test_unable_add_same_first_department", "stop": 1611464706966, "status": "broken", "start": 1611464682972, "labels": [{"value": "TestDepartmentManage", "name": "subSuite"}, {"value": "test_department_manage", "name": "suite"}, {"value": "test.test_ management_center", "name": "parentSuite"}, {"value": "PC-20200805IJRU", "name": "host"}, {"value": "3720-MainThread", "name": "thread"}, {"value": "pytest", "name": "framework"}, {"value": "cpython3", "name": "language"}, {"value": "test.test_ management_center.test_department_manage", "name": "package"}], "testCaseId": "2d0815bfc081b3c953a405b317116e89", "historyId": "1f38794495295fbe470c801ca28d4112"}